{
  "name": "ns-grunt-bundle",
  "description": "Bundle of grunt tasks to run the front end Network Security development environment",
  "version": "0.6.3",
  "author": {
    "name": "Luis Aleman",
    "email": "laleman@akamai.com"
  },
  "dependencies": {
    "autoprefixer": "^6.4.0",
    "body-parser": "^1.15.2",
    "btoa": "1.1.2",
    "cookie": "^0.3.1",
    "got": "^6.3.0",
    "grunt-angular-templates": "^1.1.0",
    "grunt-autoprefixer": "^3.0.3",
    "grunt-check-dependencies": "^0.12.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-contrib-connect": "^1.0.1",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-cssmin": "^1.0.1",
    "grunt-contrib-less": "^1.4.0",
    "grunt-contrib-uglify": "^2.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-ddescribe-iit": "^0.0.6",
    "grunt-eslint": "^18.1.0",
    "grunt-force-task": "^2.0.0",
    "grunt-karma": "^2.0.0",
    "grunt-postcss": "^0.8.0",
    "grunt-retire": "^1.0.1",
    "grunt-template-progeny": "^0.2.1",
    "grunt-template-rename": "^0.1.3",
    "http-proxy-middleware": "^0.13.0",
    "http-rewrite-middleware": "^0.1.6",
    "jasmine-core": "^2.4.1",
    "jit-grunt": "^0.10.0",
    "karma": "^1.2.0",
    "karma-coverage": "^1.1.1",
    "karma-jasmine": "^1.0.2",
    "karma-junit-reporter": "^1.1.0",
    "karma-phantomjs-launcher": "^1.0.1",
    "load-grunt-config": "^0.19.1",
    "lodash": "^4.15.0",
    "on-headers": "^1.0.1",
    "phantomjs-prebuilt": "^2.1.12",
    "portal-fixture-server": "^1.0.0",
    "postcss-sorting": "^1.2.3",
    "semver-truncate": "^1.1.2",
    "serve-static": "^1.10.2",
    "supports-color": "^3.1.2",
    "time-grunt": "^1.4.0"
  },
  "devDependencies": {
    "eslint": "^3.2.2",
    "eslint-config-airbnb-base": "^5.0.3",
    "eslint-plugin-import": "^1.14.0",
    "eslint-plugin-lodash": "^1.10.1",
    "grunt": "^1.0.1"
  },
  "files": [
    "grunt/",
    "index.js"
  ],
  "homepage": "https://stash.akamai.com/projects/NS/repos/ns-grunt-bundle/browse",
  "license": "Apache-2.0",
  "main": "index.js",
  "peerDependencies": {
    "grunt": ">=0.4.5"
  },
  "publishConfig": {
    "registry": "https://lunabuild.akamai.com/nexus/content/repositories/npm-internal/"
  },
  "repository": {
    "type": "git",
    "url": "https://stash.akamai.com/scm/ns/ns-grunt-bundle.git"
  },
  "scripts": {
    "lint": "eslint $npm_package_main grunt"
  },
  "gitHead": "04625b164f2b756de8c3d18d08b0d6cb2a3877c3",
  "readme": "# ns-grunt-bundle\n\n> A bundle of grunt tasks used by Akamai's Network Security Engineers.\n\n## Prerequisites\n\nYou need the following installed on your machine:\n\n- [git](https://git-scm.com) 1.7 or later\n- [Node.js & NPM](http://nodejs.org/)\n- [Grunt command line interface](https://github.com/gruntjs/grunt-cli)\n  - `npm install -g grunt-cli`\n- [npmrc config file](https://docs.npmjs.com/files/npmrc) pointing to Akamai's NPM registry\n  - `registry = https://lunabuild.akamai.com/nexus/content/groups/npm-all/`\n  - This file can, optionally, be created per project\n\n## Install\nThis bundle requires Grunt `>=0.4.5`\n\n```shell\nnpm install ns-grunt-bundle --save-dev\n```\n\nCreate the following `gruntfile.js`:\n\n```javascript\nmodule.exports = require('ns-grunt-bundle');\n```\n\n> Note: This is a minimal example. Customization will be documented soon™\n\n## Application Structure\n\n```text\n.\n|-- app/              # Your sourcecode directory\n|   |-- app.js        # JS files will be automatically concatenated\n|   |-- app.less      # LESS files will be automatically processed\n|   |-- app.spec.js   # SPEC files will be automatically used in unit tests\n|   |-- app.tpl.html  # Template files will be converted to angular templates\n|   |-- index.html    # Index file for your app (hosted by connect)\n|   |-- test-env.yml  # YAML list of paths to include in unit testing\n|   `-- vendor.js.yml # YAML list of paths to concat into vendor.js\n|-- .npmrc            # Local npmrc config file (Optional)\n|-- gruntfile.js      # Grunt configuration (Minimal 1 line example above)\n`-- package.json      # Information about your project and its dependencies\n```\n\nSee the included [minimal example project](examples/minimal/) as a starting point.\n\n## Tasks and CLI Options\n\n|Command | Result|\n|:-------|:-------|\n|`grunt` | Test & compile the project. Host the app, and watch for file changes. |\n|`grunt build` | One off compilation of the project (for use by Jenkins). |\n|`grunt dev` | Host the app, and watch for file changes. |\n|`grunt test` | Run ESLint and Karma one time. |\n\n|Option  | Result|\n|:-------|:-------|\n|`-open` | Instructs the connect task to open your default browser to the hosted app. |\n|`-time` | Displays the execution time of grunt tasks. |\n|`-host=<hostID>`| Instruct the API proxy to use the specified host instead of Akamai QA servers\\*. |\n|`-contract=<contractID>` | Select the contract for this session†. |\n|`-auth=<user>:<pass>`| Set user name and password for proxy to Akamai QA servers†. |\n\n> \\* Alternate hosts can be configured in the package.json `config.hosts` attribute.  \n\n> † The `-auth` and `-contract` command line arguments will take precedence over the values in `.proxy.json`.\n\n## Configuration\n\n#### Default Proxy authorization and contract\n\nYou may optionally set a default proxy authorization and/or contract header in `.proxy.json`\n\n```json\n{\n  \"auth\": \"user:pass\",\n  \"contract\": \"contractID\",\n  \"accountId\": \"accountId\",\n  \"accountName\": \"accountName\",\n  \"contractType\": \"contractType\"\n}\n```\n\n> Warning: Add `.proxy.json` to your `.gitignore` file. It is not wise to track passwords.\n\n#### Adding alternate hosts\n\nIn package.json, one can add key/value pairs to the `config.hosts` object.\n> Note: Authorization and contract headers are only automatically set for the default Akamai QA server.\n\n```javascript\n// package.json\n{\n  // ...\n  \"config\": {\n    \"hosts\": {\n      \"example\": {\n      \t\"context\": \"/api\",\n      \t\"options\": {\n          \"target\": \"http://www.example.org\"\n\t\t}\n      }\n    }\n  },\n  // ...\n}\n```\n\n* **context**: matches provided context against request-urls' path.\n  * Matching requests will be proxied to the target host.\n  * Example: `'/api'` or `['/api', '/ajax']`.\n  * Default: `package.apiProxyContext` or `/<%= package.name %>/api`\n* **options.target**: target host to proxy to.\n  * Required\n\n[Additional documentation for proxy configuration](https://github.com/chimurai/http-proxy-middleware#options).\n\nA custom host can be used with the following command line argument:\n\n```shell\ngrunt --host=example\n```\n\n#### Pulsar API authentication\n\nWorking with Pulsar API, you have to specify authentication type in `package.json`\n> Note: omiting authentication type will default to \"routed\" (Basic Auth) style api call request\n\n\n```javascript\n// package.json\n{\n\t// ...\n\t\"config\": {\n\t\t\"authType\": \"pulsar\",\n\t\t\"clientId\": \"use your pulsar application id\"\n\t},\n\t// ...\n}\n```\n\n\n#### Mock-API\n\nTo mock api responses:\n1. create `mock-api` folder at the root of your application\n2. create `mock-api.json` file in the folder\n3. create json files with response or create js files with exported methods that will be run on the route match\n4. define context and routes (see examples bellow)\n5. run grunt with `--mock-api` option or set `package.json/config` protperty `\"mockApi\": true`\n\nMain mock-api file, defines the contexts, routes and responses\n> Note: Route matching using regex, you'll need to escape regex operators  \n> Note: Mock-api will return 1st matched route, declare specific routes `/items/1` before generic/catch-all `/items`\n\n\n```javascript\n// mock-api/mock-api.json\n\"foo-context/rest/v1\": {\n\t// get json response for specific resource\n\t\"/items/1\": {\n\t\t\"GET\": \"item-1.json\"\n\t},\n\t// mimic error response\n\t\"/items/33\": {\n\t\t\"GET\": \"404.json\"\n\t},\n\t// response specific to query parameters\n\t\"/items/1\\\\?extended=true\": {\n\t\t\"GET\": \"item-1-extended.json\n\t},\n\t// response to a range\n\t\"/items/[0-9]+\": {\n\t\t\"GET\": \"item-get.json\",\n\t\t// update response\n\t\t\"PUT\": \"item-put.json\"\n\t},\n\t\"/items\": {\n\t\t\"GET\": \"items-get.json\",\n\t\t\"POST\": \"items-post.json\"\n\t},\n\t\"/bar\": {\n\t\t// custom function to process request\n\t\t\"GET\": \"bar-get.js\",\n\t\t\"PUT\": \"bar-put.js\"\n\t},\n\t// catch all methods\n\t\"/foobar\": \"foobar.js\",\n\t\"/foobaz\": \"foobaz.json\n}\n```\n\nThere are 3 ways to mock your resource:\n\n\nJSON\n\n```javascript\n{\n\t\"id\": 1,\n\t\"name\": \"foo\"\n}\n```\n\nExport JS object\n\n```javascript\nmodule.exports = {\n\t\"id\": 1,\n\t\"name\": \"foo\"\n}\n```\n\nExport Function \n\n```javascript\nvar _ = require('lodash');\n\nmodule.exports = function sayHello(req, res, next) {\n\tvar id = _.get(/\\/(\\d+)$/.exec(req.url), 1, null);\n\n\t// continue to the next middleware\n\tif (!id) {\n\t\treturn next();\n\t}\n\n\t// return mock data\n\tres.setHeader('Content-Type', 'application/json');\n\treturn res.end(JSON.stringify({\n\t\tid: id,\n\t\tname: 'item'\n\t}));\n}\n```\n\n\n#### Locale File Management\nTo aggregate multiple locale files across components and dependencies \n`ns-grunt-bundle` provides `mergeLocale` task. \n\nTo configure create `grunt/` directory and add `aliases.yml` file, inside define following task\n\n```yml\ncompile:\n- compile-index\n- compile-tpl\n- compile-js\n- compile-vendor-js\n- compile-css\n- mergeLocales\n\n```\n\nThen create `app/locale.yml` and specify locale file paths in glob pattern\n\n```yml\n'app/assets/locales/*.json'\n'node_modules/component1/dist/locales/*.json'\n\n```\n\nAfter everything complete you can use `ns-grunt-bundle` as before.\n\n",
  "readmeFilename": "README.md",
  "_id": "ns-grunt-bundle@0.6.3",
  "_shasum": "61fd9380fe4915e52a4649237ca77e33d95e3839",
  "_from": "ns-grunt-bundle@>=0.6.1 <0.7.0",
  "_npmVersion": "2.10.1",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "name": "deployment",
    "email": "portalrel@akamai.com"
  },
  "maintainers": [
    {
      "name": "deployment",
      "email": "portalrel@akamai.com"
    }
  ],
  "dist": {
    "shasum": "61fd9380fe4915e52a4649237ca77e33d95e3839",
    "tarball": "https://lunabuild.akamai.com/nexus/content/groups/npm-all/ns-grunt-bundle/-/ns-grunt-bundle-0.6.3.tgz"
  },
  "_resolved": "https://lunabuild.akamai.com/nexus/content/groups/npm-all/ns-grunt-bundle/-/ns-grunt-bundle-0.6.3.tgz"
}
